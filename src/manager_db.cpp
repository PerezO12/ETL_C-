#include "../include/manager_db.hpp"

#include <iostream>
#include <unordered_set>
#include <stdexcept>

manager_db::manager_db(const string& host, const string& dbname, const string& user, const string& password, const string& port)
{
    string conninfo = "host=" + host + " dbname=" + dbname + " user=" + user + " password=" + password + " port=" + port;

    conn = PQconnectdb(conninfo.c_str());

    if (PQstatus(conn) != CONNECTION_OK) {
        cerr << "Conexión a la base de datos fallida: " << PQerrorMessage(conn) << endl;
        throw runtime_error("Error en la conexión a la base de datos");
    } else {
        cout << "Conexión exitosa a la base de datos " << dbname << endl;
    }
}

//insert
void manager_db::execute_query(const string& query) {
    PGresult* res = PQexec(conn, query.c_str());

    if (PQresultStatus(res) != PGRES_COMMAND_OK) {
        cerr << "Error en la consulta: " << PQerrorMessage(conn) << endl;
    } else {
        cout << "Consulta ejecutada con éxito" << endl;
    }

    PQclear(res);
}

//get
PGresult* manager_db::execute_select_query(const string& query) {
    PGresult* res = PQexec(conn, query.c_str());

    if (PQresultStatus(res) != PGRES_TUPLES_OK) {
     cerr << "Error en la consulta SELECT: " << PQerrorMessage(conn) << endl;
        PQclear(res);
        return nullptr;
    }

    return res;
}

//create table
void manager_db::createTables(const json& config) {
    if(!config.contains("tables")) {
        throw runtime_error("La configuracion no contiene la seccion 'tables'.");
    }

    for (auto& [tableName, tableConfig] : config["tables"].items()) {
        string query = "CREATE TABLE IF NOT EXISTS " + tableName + " (";
        //id
        query += "\n\"id\" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n";

        if(!tableConfig.contains("columns")) 
            throw runtime_error("La tabla " + tableName + " no tiene definida la seccion 'columns'.");
        
        const auto& columns = tableConfig["columns"];
        for(const auto& column : columns) {
            string colName = column["name"];
            string colType = column["type"];
            query += colName + " " + colType + ", ";
        }
        if(query.size() > 2) {
            query.erase(query.size() - 2, 2);
        }
        query += ");";
        //IPMRIMIR QUERY
        cout << query << "\n";
        try {
            execute_query(query);
            cout << "Tabla " << tableName << " creada (o ya existía)." << endl;
        } catch (const exception& e) {
            cerr << "Error al crear la tabla " << tableName << ": " << e.what() << endl;
        }
    }
}

void manager_db::createRelationships(const json& config) {
    if (!config.contains("relationships")) {
        cout << "No hay relaciones definidas en la configuración." << endl;
        return;
    }
    for (auto& relation : config["relationships"]) {
        string junctionTable = relation["junctionTable"];

        string query = "CREATE TABLE IF NOT EXISTS " + junctionTable + " (";
        query += relation["foreignKeys"][ relation["tableA"].get<string>() ].get<string>() + " INT, ";
        query += relation["foreignKeys"][ relation["tableB"].get<string>() ].get<string>() + " INT";

        if (relation.contains("extraColumns")) {
            for (const auto& extra : relation["extraColumns"]) {
                query += ", " + extra["name"].get<string>() + " " + extra["type"].get<string>();
            }
        }
        query += ");";
        //IPMRIMIR QUERY
        cout << query << "\n";
        try {
            execute_query(query);
            cout << "Tabla de relación " << junctionTable << " creada (o ya existía)." << endl;
        } catch (const exception& e) {
            cerr << "Error al crear la tabla de relación " << junctionTable << ": " << e.what() << endl;
        }
    }
}

//destructor
manager_db::~manager_db() {
    if (conn) {
        PQfinish(conn);
     cout << "Conexión cerrada" << endl;
    }
}