#include "../include/manager_db.hpp"

#include <iostream>
#include <unordered_set>
#include <stdexcept>

managerDb::managerDb(const string& host, const string& dbname, const string& user, const string& password, const string& port)
{
    string conninfo = "host=" + host + " dbname=" + dbname + " user=" + user + " password=" + password + " port=" + port;

    conn = PQconnectdb(conninfo.c_str());

    if (PQstatus(conn) != CONNECTION_OK) {
        cerr << "Conexión a la base de datos fallida: " << PQerrorMessage(conn) << endl;
        throw runtime_error("Error en la conexión a la base de datos");
    } else {
        cout << "Conexión exitosa a la base de datos " << dbname << endl;
    }
}

//insert
void managerDb::executeQuery(const string& query) {
    PGresult* res = PQexec(conn, query.c_str());

    if (PQresultStatus(res) != PGRES_COMMAND_OK) {
        cerr << "Error en la consulta: " << PQerrorMessage(conn) << endl;
    } else {
        cout << "Consulta ejecutada con éxito" << endl;
    }

    PQclear(res);
}
string managerDb::executeQueryReturningId(const string& query) {
    PGresult* res = PQexec(conn, query.c_str());
    
    if (PQresultStatus(res) != PGRES_TUPLES_OK) {
        cerr << "Error en la consulta (RETURNING id): " << PQerrorMessage(conn) << endl;
        PQclear(res);
        throw runtime_error("Error al ejecutar query con RETURNING id");
    }
    string id = "";

    if (PQntuples(res) > 0) {
        id = PQgetvalue(res, 0, 0);
    } else {
        cerr << "La consulta no retornó ningún ID." << endl;
    }
    
    PQclear(res);
    return id;
}

//get
PGresult* managerDb::excecuteSelectQuery(const string& query) {
    PGresult* res = PQexec(conn, query.c_str());

    if (PQresultStatus(res) != PGRES_TUPLES_OK) {
     cerr << "Error en la consulta SELECT: " << PQerrorMessage(conn) << endl;
        PQclear(res);
        return nullptr;
    }

    return res;
}

//create table
void managerDb::createTables(const json& config) {
    if(!config.contains("tables")) {
        throw runtime_error("La configuracion no contiene la seccion 'tables'.");
    }

    for (auto& [tableName, tableConfig] : config["tables"].items()) {
        bool generatedId = tableConfig.value("generatedId", false);
        string query = "CREATE TABLE IF NOT EXISTS " + tableName + " (";
        //todo:revizar luego
        if(generatedId)
        {
            query += "\n\"id\" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n";
        }

        if(!tableConfig.contains("columns")) 
            throw runtime_error("La tabla " + tableName + " no tiene definida la seccion 'columns'.");
        
        const auto& columns = tableConfig["columns"];
        for(const auto& column : columns) {
            string colName = column["name"];
            string colType = column["type"];
            query += colName + " " + colType + ", ";
        }
        if(query.size() > 2) {
            query.erase(query.size() - 2, 2);
        }
        query += ");";
        //IPMRIMIR QUERY
        cout << query << "\n";
        try {
            executeQuery(query);
            cout << "Tabla " << tableName << " creada (o ya existía)." << endl;
        } catch (const exception& e) {
            cerr << "Error al crear la tabla " << tableName << ": " << e.what() << endl;
        }
    }
}
//todo:falta crear las relaciones
void managerDb::createRelationships(const json& config) {
    if (!config.contains("relationships")) {
        cout << "No hay relaciones definidas en la configuración." << endl;
        return;
    }
    for (const auto& relation : config["relationships"]) {
        string type = relation["type"].get<string>();

        if (type == "MANY_TO_MANY") {
            string junctionTable = relation["junctionTable"].get<string>();
            string query = "CREATE TABLE IF NOT EXISTS " + junctionTable + " (";
            bool first = true;
            for (const auto& col : relation["columns"]) {
                if (!first) {
                    query += ", ";
                }
                string colName = col["name"].get<string>();
                string colType;
                if (col.contains("type")) {
                    colType = col["type"].get<string>();
                } 
                else if (col.contains("source")) {
                    colType = "INT";
                } else {
                    colType = "VARCHAR";
                }
                query += colName + " " + colType;
                first = false;
            }
            query += ");";
            cout << query << "\n";
            try {
                executeQuery(query);
                cout << "Tabla de relación " << junctionTable << " creada (o ya existía)." << endl;
            } catch (const exception& e) {
                cerr << "Error al crear la tabla de relación " << junctionTable << ": " << e.what() << endl;
            }
        } 
        else if (type == "ONE_TO_MANY") {
            string oneTable = relation["oneTable"].get<string>();
            string manyTable = relation["manyTable"].get<string>();
            for (const auto& col : relation["columns"]) {
                string fkColumn = col["name"].get<string>();
                string query = "ALTER TABLE " + manyTable + " ADD COLUMN IF NOT EXISTS " + fkColumn + " INT;";
                cout << query << "\n";
                try {
                    executeQuery(query);
                    cout << "Columna " << fkColumn << " agregada a la tabla " << manyTable << "." << endl;
                } catch (const exception& e) {
                    cerr << "Error al agregar columna " << fkColumn << " a la tabla " << manyTable << ": " << e.what() << endl;
                }
            }
        } 
        else if (type == "ONE_TO_ONE") {
            string tableA = relation["tableA"].get<string>();
            string tableB = relation["tableB"].get<string>();
            for (const auto& col : relation["columns"]) {
                string fkColumn = col["name"].get<string>();
                string query = "ALTER TABLE " + tableB + " ADD COLUMN IF NOT EXISTS " + fkColumn + " INT;";
                cout << query << "\n";
                try {
                    executeQuery(query);
                    cout << "Columna " << fkColumn << " agregada a la tabla " << tableB << "." << endl;
                } catch (const exception& e) {
                    cerr << "Error al agregar columna " << fkColumn << " a la tabla " << tableB << ": " << e.what() << endl;
                }
            }
        } 
        else {
            cout << "Tipo de relación desconocido: " << type << endl;
        }
    }
}




//destructor
managerDb::~managerDb() {
    if (conn) {
        PQfinish(conn);
     cout << "Conexión cerrada" << endl;
    }
}